local cjson = require "cjson"
local http = require "resty.http"
local uuid = require "resty.jit-uuid"

-- Initialize the UUID library to generate trace and span IDs.
uuid.seed()

local Tracing = {}

-- Constructor for the Tracing object.
function Tracing:new()
    local instance = {
        spans = {},  -- Table to store span information.
        context = {} -- Context management, if needed.
    }
    setmetatable(instance, { __index = Tracing })
    return instance
end

-- Create a new span with a unique trace ID and span ID.
function Tracing:create_span(name)
    local span = {
        trace_id = uuid(),  -- Unique trace ID.
        span_id = uuid(),   -- Unique span ID.
        name = name,        -- Name of the span.
        start_time = ngx.now(),  -- Timestamp when the span starts.
        end_time = nil,          -- Placeholder for the end time.
        attributes = {}     -- Custom attributes for the span.
    }
    table.insert(self.spans, span)
    return span
end

-- Mark the end of a span by setting its end time.
function Tracing:end_span(span)
    span.end_time = ngx.now()
end

-- Add a custom attribute to a span.
function Tracing:add_attribute(span, key, value)
    span.attributes[key] = value
end

-- Format the span data for exporting.
function Tracing:export_span(span)
    local trace_data = {
        -- Populate the trace data structure according to your backend requirements.
        -- Convert timestamps to the required format, etc.
    }
    return cjson.encode(trace_data)
end

-- Send the formatted trace data to the OpenTelemetry collector.
function Tracing:send_trace_to_collector(trace_data)
    local httpc = http.new()
    local res, err = httpc:request_uri("http://otel-collector:port/v1/traces", {
        method = "POST",
        body = trace_data,
        headers = {
            ["Content-Type"] = "application/json",
        },
    })

    if not res then
        ngx.log(ngx.ERR, "Failed to send trace data: ", err)
        return
    end

    if res.status < 200 or res.status >= 300 then
        ngx.log(ngx.ERR, "Failed to send trace data, status: ", res.status)
    end
end

return Tracing
