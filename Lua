local cjson = require "cjson"
local http = require "resty.http"

local tracer = {
    spans = {}
}

-- Starts a new span for a request
function tracer:start_span()

local uuid = require "resty.jit-uuid"
uuid.seed()  -- Seed the random number generator

function tracer:start_span()
    local span = {
        id = uuid(),  -- Generate a new UUID for each span
        trace_id = uuid(),  -- Generate a unique trace ID      
        start_time = ngx.now(),  -- Start time
        method = ngx.var.request_method,
        url = ngx.var.scheme .. "://" .. ngx.var.host .. ngx.var.uri
        -- Include additional span attributes as needed
    }
    table.insert(self.spans, span)
    ngx.ctx.opentelemetry_span = span
end

-- Ends the current span for a request
function tracer:end_span()
    local span = ngx.ctx.opentelemetry_span
    if span then
        span.end_time = ngx.now()  -- End time
        -- Include additional span closure logic as needed
    end
    return span
end

-- Formats the trace data into the OTel collector's expected format
local function format_trace_data(span)
    local trace_data = {
        -- Populate the required fields as per your OTel collector's format
        -- This might include trace ID, span ID, parent span ID, etc.
        -- Example:
        trace_id = "some_trace_id",  -- Adjust based on actual trace ID logic
        spans = {
            {
                trace_id = "some_trace_id",
                span_id = tostring(span.id),
                parent_span_id = "parent_span_id",  -- If applicable
                name = span.method .. " " .. span.url,
                start_time_unix_nano = span.start_time,
                end_time_unix_nano = span.end_time,
                -- Include additional span data as needed
            }
        }
    }
    return cjson.encode(trace_data)
end

-- Sends trace data to the OTel collector
local function send_trace_to_collector(formatted_data)
    local httpc = http.new()
    local res, err = httpc:request_uri("http://otel-collector:port/v1/traces", {
        method = "POST",
        body = formatted_data,
        headers = {
            ["Content-Type"] = "application/json",
        },
    })

    if not res then
        ngx.log(ngx.ERR, "Failed to send trace data: ", err)
        return
    end

    if res.status < 200 or res.status >= 300 then
        ngx.log(ngx.ERR, "Failed to send trace data, status: ", res.status)
    end
end

-- Error logging utility
local function log_error(...)
    ngx.log(ngx.ERR, ...)
end

return tracer


